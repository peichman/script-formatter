#!/usr/bin/perl -w
use strict;

use Getopt::Long;
use File::Basename qw{fileparse};
use Spreadsheet::Read;
use Template;
use YAML;
use FindBin qw{$RealBin};

binmode(STDIN, ':encoding(UTF-8)');
binmode(STDOUT, ':encoding(UTF-8)');

GetOptions(
    'format|f=s'     => \my $FORMAT,
    'column|c=i'     => \my %COLUMN_FOR,
    'skip=i'         => \my $SKIP_ROWS,
    'dump|x'         => \my $DUMP,
    'input-file|i=s' => \my $INPUT_FILE,
    'sheet=s'        => \my $SHEET_NUMBER,
    'input-type|t=s' => \my $INPUT_TYPE,
);

# select the input type, default to csv
my $input_type = $INPUT_TYPE ? $INPUT_TYPE :
                 $INPUT_FILE ? substr((fileparse($INPUT_FILE, qr/\.[^.]*/))[2], 1) :
                 'csv';

# default to html
$FORMAT ||= 'html';

# default to first sheet
$SHEET_NUMBER ||= 1;

$SKIP_ROWS = 1 unless defined $SKIP_ROWS;
my $start_row = 1 + $SKIP_ROWS;

# character to highlight
my $ME = shift || '';

$COLUMN_FOR{speaker} && $COLUMN_FOR{number} && $COLUMN_FOR{text} or die "Missing column definitions\n";

my $book = Spreadsheet::Read->new($INPUT_FILE || \*STDIN, parser => $input_type);
my $sheet = $book->sheet($SHEET_NUMBER);

my $last_speaker = '';
my @current_speech;
my @speeches;
for my $row_number ($start_row .. $sheet->maxrow) {
    my $speaker = $sheet->cell($COLUMN_FOR{speaker}, $row_number);
    my $number  = $sheet->cell($COLUMN_FOR{number}, $row_number);
    my $text    = $sheet->cell($COLUMN_FOR{text}, $row_number);
    my $scene   = $COLUMN_FOR{scene} ? $sheet->cell($COLUMN_FOR{scene}, $row_number) : '';
    $text =~ s/^\s*|\s$//g;
    if ($speaker ne $last_speaker) {
        if ($speaker eq '.') {
            if (@current_speech) {
                push @speeches, { type => 'speech', speaker => $last_speaker, lines => [ @current_speech ] };
                @current_speech = ();
            }
            push @speeches, { type => 'direction', number => $number, text => $text, scene => $scene };
        } else {
            if (@current_speech) {
                push @speeches, { type => 'speech', speaker => $last_speaker, lines => [ @current_speech ] };
                @current_speech = ();
            }
            push @current_speech, { number => $number, text => $text, scene => $scene, highlighted => ($speaker eq $ME) };
            $last_speaker = $speaker;
        }
    } else {
        push @current_speech, { number => $number, text => $text, scene => $scene, highlighted => ($speaker eq $ME) };
    }
}

if ($DUMP) {
    print Dump(\@speeches);
    exit;
}

# assume the first direction is the title
my $title = (grep { $_->{type} eq 'direction' } @speeches)[0]->{text};

my $tt = Template->new({ INCLUDE_PATH => $RealBin });

$tt->process("script.$FORMAT", { title => $title, blocks => \@speeches }) or die $tt->error;
