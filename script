#!/usr/bin/perl -w
use strict;

use Getopt::Long;
use Text::CSV;
use Template;
use YAML;

binmode(STDIN, ':encoding(UTF-8)');
binmode(STDOUT, ':encoding(UTF-8)');

GetOptions(
    'format|f=s' => \my $FORMAT,
    'column|c=i' => \my %COLUMN_FOR,
    'skip=i'     => \my $SKIP_ROWS,
    'dump|x'     => \my $DUMP,
);

# default to html
$FORMAT ||= 'html';

$SKIP_ROWS = 1 unless defined $SKIP_ROWS;

# character to highlight
my $ME = shift || '';

$COLUMN_FOR{speaker} && $COLUMN_FOR{number} && $COLUMN_FOR{text} or die "Missing column definitions\n";
# adjust to 0-based index
$_-- foreach values %COLUMN_FOR;

my $csv = Text::CSV->new({ binary => 1 }) or die "Cannot use CSV: " . Text::CSV->error_diag;

# skip header rows, if any
$csv->getline(\*STDIN) for (1 .. $SKIP_ROWS);

my $last_speaker = '';
my @current_speech;
my @speeches;
while (my $row = $csv->getline(\*STDIN)) {
    my $speaker = $row->[$COLUMN_FOR{speaker}];
    my $number  = $row->[$COLUMN_FOR{number}];
    my $text    = $row->[$COLUMN_FOR{text}];
    $text =~ s/^\s*|\s$//g;
    if ($speaker ne $last_speaker) {
        if ($speaker eq '.') {
            if (@current_speech) {
                push @speeches, { type => 'speech', speaker => $last_speaker, lines => [ @current_speech ] };
                @current_speech = ();
            }
            push @speeches, { type => 'direction', number => $number, text => $text };
        } else {
            if (@current_speech) {
                push @speeches, { type => 'speech', speaker => $last_speaker, lines => [ @current_speech ] };
                @current_speech = ();
            }
            push @current_speech, { number => $number, text => $text, highlighted => ($speaker eq $ME) };
            $last_speaker = $speaker;
        }
    } else {
        push @current_speech, { number => $number, text => $text, highlighted => ($speaker eq $ME) };
    }
}
$csv->eof or $csv->error_diag();

if ($DUMP) {
    print Dump(\@speeches);
    exit;
}

# assume the first direction is the title
my $title = (grep { $_->{type} eq 'direction' } @speeches)[0]->{text};

my $tt = Template->new({ INCLUDE_PATH => '.' });

$tt->process("script.$FORMAT", { title => $title, blocks => \@speeches }) or die $tt->error;
