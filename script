#!/usr/bin/perl -w
use strict;

use Getopt::Long;
use Text::CSV;
use Template;

binmode(STDIN, ':encoding(UTF-8)');
binmode(STDOUT, ':encoding(UTF-8)');

GetOptions(
    'format|f=s' => \my $FORMAT,
);

# default to html
$FORMAT ||= 'html';

# character to highlight
my $ME = shift || '';

my $csv = Text::CSV->new({ binary => 1 }) or die "Cannot use CSV: " . Text::CSV->error_diag;

$csv->column_names($csv->getline(\*STDIN));

my $last_character = '';
my @current_speech;
my @speeches;
while (my $row = $csv->getline_hr(\*STDIN)) {
    my $character = $row->{Who};
    my $n = $row->{Row};
    my $text = $row->{'#VALUE!'};
    $text =~ s/^\s*|\s$//g;
    if ($character ne $last_character) {
        if ($character eq '.') {
            if (@current_speech) {
                push @speeches, { type => 'speech', speaker => $last_character, lines => [ @current_speech ] };
                @current_speech = ();
            }
            push @speeches, { type => 'direction', number => $n, text => $text };
        } else {
            if (@current_speech) {
                push @speeches, { type => 'speech', speaker => $last_character, lines => [ @current_speech ] };
                @current_speech = ();
            }
            push @current_speech, { number => $n, text => $text, highlighted => ($character eq $ME) };
            $last_character = $character;
        }
    } else {
        push @current_speech, { number => $n, text => $text, highlighted => ($character eq $ME) };
    }
}
$csv->eof or $csv->error_diag();

# assume the first direction is the title
my $title = (grep { $_->{type} eq 'direction' } @speeches)[0]->{text};

my $tt = Template->new({ INCLUDE_PATH => '.' });

$tt->process("script.$FORMAT", { title => $title, blocks => \@speeches }) or die $tt->error;
